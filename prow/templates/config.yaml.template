prowjob_namespace: prow
pod_namespace: prow-test-pods

plank:
  allow_cancellations: true
  job_url_prefix: 'https://{{.prow.baseurl}}/view/gcs'
  job_url_template: '{{.prow.job_url_template}}'
  report_template: '{{.prow.report_template}}'
  pod_pending_timeout: 60m
  default_decoration_config:
    timeout: 2h
    grace_period: 15s
    utility_images:
      clonerefs: "gcr.io/k8s-prow/clonerefs:v20190517-95ef25d87"
      initupload: "gcr.io/k8s-prow/initupload:v20190517-95ef25d87"
      entrypoint: "gcr.io/k8s-prow/entrypoint:v20190517-95ef25d87"
      sidecar: "gcr.io/k8s-prow/sidecar:v20190517-95ef25d87"
    gcs_configuration:
      bucket: "{{.prow.bucket_name}}"
      path_strategy: "explicit"
    gcs_credentials_secret: gcs-credentials
    ssh_key_secrets:
      - github-ssh-key # name of the secret that stores the bot's ssh keys for GitHub, doesn't matter what the key of the map is and it will just uses the values    

deck:
  spyglass:
    size_limit: 500000000 # 500MB
    viewers:
      "started.json|finished.json":
      - "metadata"
      "build-log.txt":
      - "buildlog"
      "artifacts/junit.*\\.xml":
      - "junit"
  tide_update_period: 1s

sinker:
  resync_period: 1m
  max_prowjob_age: 48h
  max_pod_age: 30m

push_gateway:
  endpoint: pushgateway
  serve_metrics: true

branch-protection:
  orgs:
    {.github.org}:
      protect: true  # enable protection
      enforce_admins: true  # rules apply to admins
      required_pull_request_reviews:
        dismiss_stale_reviews: false # automatically dismiss old reviews
        dismissal_restrictions: # allow review dismissals
          users:
          - belitre
          - givanov
          - alexouzounis
          teams:
          - team # the ouzi team
        require_code_owner_reviews: true  # require a code owner approval
        required_approving_review_count: 1 # number of approvals
      required_status_checks:
        strict: true # require pr branch to be up to date
      restrictions: # restrict who can push to the repo
        users:
        - ouzi-bot

tide:
  sync_period: 1m
  merge_method:
    {{.github.org}}: squash
  pr_status_base_url: https://{{.prow.baseurl}}/pr
  blocker_label: tide/merge-blocker
  squash_label: tide/merge-method-squash
  rebase_label: tide/merge-method-rebase
  merge_label: tide/merge-method-merge
  context_options:
    # Use branch protection options to define required and optional contexts
    from-branch-protection: true
    # Treat unknown contexts as optional
    skip-unknown-contexts: false
  queries:
  - orgs:
    - {{.github.org}}
    labels:
    - lgtm
    - approved
    missingLabels:
    - do-not-merge
    - do-not-merge/hold
    - do-not-merge/work-in-progress
    - needs-rebase
    - do-not-merge/invalid-owners-file

github_reporter:
  job_types_to_report:
  - presubmit
  - postsubmit

slack_reporter:
  # Default: None
  job_types_to_report:
  - presubmit
  - postsubmit
  - periodic
  - batch
  # Default: None
  job_states_to_report:
  - triggered
  - pending
  - success
  - failure
  - aborted
  - error
  channel: cicd-job-status
  # The template shown below is the default
  report_template: '{{.slack.report_template}}'

presets:
# credential presets
- labels:
    preset-terraform: "true"
  env:
  - name: GOOGLE_APPLICATION_CREDENTIALS
    value: /etc/google-service-account/service-account.json
  # storage e2e tests borrow this as a preconfigured key instead of creating and
  # injecting a new key. this allows us to avoid mass key download warnings
  - name: E2E_GOOGLE_APPLICATION_CREDENTIALS
    value: /etc/google-service-account/service-account.json
  - name: AWS_ACCESS_KEY_ID
    valueFrom:
      secretKeyRef:
        name: terraform-ouzidev-aws-service-account
        key: access_key_id
  - name: AWS_SECRET_ACCESS_KEY
    valueFrom:
      secretKeyRef:
        name: terraform-ouzidev-aws-service-account
        key: secret_access_key
  volumes:
  - name: google-service-account
    secret:
      secretName: terraform-ouzidev-google-service-account
  volumeMounts:
  - name: google-service-account
    mountPath: /etc/google-service-account
    readOnly: true
- labels:
    preset-docker: "true"
  env:
    - name: DOCKER_CONFIG
      value: "/kaniko/.docker"
  volumes:
  - name: kaniko-config
    projected:
      sources:
      - secret:
          name: ouzi-bot-pull-push-secret
          items:
          - key: .dockerconfigjson
            path: config.json      
  volumeMounts:
  - name: kaniko-config
    mountPath: /kaniko/.docker