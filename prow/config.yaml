prowjob_namespace: prow
pod_namespace: prow-test-pods

plank:
  job_url_template: 'https://prow.test-infra.ouzi.io/view/gcs/ouzidev-testinfra-252513-prow-artefacts/{{if eq .Spec.Type "presubmit"}}pr-logs/pull{{else if eq .Spec.Type "batch"}}pr-logs/pull{{else}}logs{{end}}/{{if eq .Spec.Type "presubmit"}}{{.Spec.Refs.Org}}_{{.Spec.Refs.Repo}}/{{with index .Spec.Refs.Pulls 0}}{{.Number}}/{{end}}{{else if eq .Spec.Type "batch"}}{{.Spec.Refs.Org}}_{{.Spec.Refs.Repo}}/batch/{{end}}{{.Spec.Job}}/{{.Status.BuildID}}/'
  report_template: '[Full PR test history](https://prow.test-infra.ouzi.io/pr-history?org={{.Spec.Refs.Org}}&repo={{.Spec.Refs.Repo}}&pr={{with index .Spec.Refs.Pulls 0}}{{.Number}}{{end}})'
  pod_pending_timeout: 60m
  default_decoration_configs:
    '*':
      timeout: 2h
      grace_period: 15s
      utility_images:
        clonerefs: "gcr.io/k8s-prow/clonerefs:v20200203-cae3cccf8"
        initupload: "gcr.io/k8s-prow/initupload:v20200203-cae3cccf8"
        entrypoint: "gcr.io/k8s-prow/entrypoint:v20200203-cae3cccf8"
        sidecar: "gcr.io/k8s-prow/sidecar:v20200203-cae3cccf8"
      gcs_configuration:
        bucket: "ouzidev-testinfra-252513-prow-artefacts"
        path_strategy: "explicit"
      gcs_credentials_secret: gcs-credentials
      ssh_key_secrets:
        - github-ssh-key # name of the secret that stores the bot's ssh keys for GitHub, doesn't matter what the key of the map is and it will just uses the values       

deck:
  spyglass:
    size_limit: 500000000 # 500MB
    announcement: "Remember: friendship is magic!"
    lenses:
    - lens:
        name: metadata
      required_files:
      - started.json|finished.json
      optional_files:
      - podinfo.json
    - lens:
        name: buildlog
      required_files:
        - build-log.txt
    - lens:
        name: junit
      required_files:
        - artifacts/junit.*\.xml
    - lens:
        name: coverage
      required_files:
        - artifacts/filtered.cov
      optional_files:
        - artifacts/filtered.html
    - lens:
        name: podinfo
      required_files:
        - podinfo.json
  tide_update_period: 1s


sinker:
  resync_period: 1m
  max_prowjob_age: 48h
  max_pod_age: 30m

push_gateway:
  endpoint: pushgateway
  serve_metrics: true

branch-protection:
  orgs:
    ouzi-dev:
      repos:
        test-infra:
          branches:
            master:
              protect: true  # enable protection
              enforce_admins: true  # rules apply to admins
              restrictions: # restrict who can push to the repo
                users:
                - ouzibot
        eks-terraform:
          branches:
            master:
              protect: true  # enable protection
              enforce_admins: true  # rules apply to admins
              restrictions: # restrict who can push to the repo
                users:
                - ouzibot
        whalers-of-the-moon:
          branches:
            master:
              protect: true  # enable protection
              enforce_admins: true  # rules apply to admins
              restrictions: # restrict who can push to the repo
                users:
                - ouzibot
        prow-gke-terraform:
          branches:
            master:
              protect: true  # enable protection
              enforce_admins: true  # rules apply to admins
              restrictions: # restrict who can push to the repo
                users:
                - ouzibot
        prow-helm-chart:
          branches:
            master:
              protect: true  # enable protection
              enforce_admins: true  # rules apply to admins
              restrictions: # restrict who can push to the repo
                users:
                - ouzibot
        avro-kedavro:
          branches:
            master:
              protect: true  # enable protection
              enforce_admins: true  # rules apply to admins
              restrictions: # restrict who can push to the repo
                users:
                - ouzibot
        bigbang:
          branches:
            master:
              protect: true  # enable protection
              enforce_admins: true  # rules apply to admins
              restrictions: # restrict who can push to the repo
                users:
                - ouzibot
        gke-terraform:
          branches:
            master:
              protect: true  # enable protection
              enforce_admins: true  # rules apply to admins
              restrictions: # restrict who can push to the repo
                users:
                - ouzibot
        commit-status-updater:
          branches:
            master:
              protect: true  # enable protection
              enforce_admins: true  # rules apply to admins
              restrictions: # restrict who can push to the repo
                users:
                - ouzibot
        dind-action:
          branches:
            master:
              protect: true  # enable protection
              enforce_admins: true  # rules apply to admins
              restrictions: # restrict who can push to the repo
                users:
                - ouzibot
        go-make-action:
          branches:
            master:
              protect: true  # enable protection
              enforce_admins: true  # rules apply to admins
              restrictions: # restrict who can push to the repo
                users:
                - ouzibot
        credstash-operator:
          branches:
            master:
              protect: true  # enable protection
              enforce_admins: true  # rules apply to admins
              restrictions: # restrict who can push to the repo
                users:
                - ouzibot
        ouzi.io:
          branches:
            master:
              protect: true  # enable protection
              enforce_admins: true  # rules apply to admins
              restrictions: # restrict who can push to the repo
                users:
                - ouzibot
        docs:
          branches:
            master:
              protect: true  # enable protection
              enforce_admins: true  # rules apply to admins
              restrictions: # restrict who can push to the repo
                users:
                - ouzibot
        owners-template:
          branches:
            master:
              protect: true  # enable protection
              enforce_admins: true  # rules apply to admins
              restrictions: # restrict who can push to the repo
                users:
                - ouzibot
        syrinx:
          branches:
            master:
              protect: true  # enable protection
              enforce_admins: true  # rules apply to admins
              restrictions: # restrict who can push to the repo
                users:
                - ouzibot
        hoarder-prow:
          branches:
            master:
              protect: true  # enable protection
              enforce_admins: true  # rules apply to admins
              restrictions: # restrict who can push to the repo
                users:
                - ouzibot
        prow-installer:
          branches:
            master:
              protect: true  # enable protection
              enforce_admins: true  # rules apply to admins
              restrictions: # restrict who can push to the repo
                users:
                - ouzibot
        node-tagger:
          branches:
            master:
              protect: true  # enable protection
              enforce_admins: true  # rules apply to admins
              restrictions: # restrict who can push to the repo
                users:
                - ouzibot
        claptrap:
          branches:
            master:
              protect: true  # enable protection
              enforce_admins: true  # rules apply to admins
              restrictions: # restrict who can push to the repo
                users:
                - ouzibot
        k8sprimitives1:
          branches:
            master:
              protect: true  # enable protection
              enforce_admins: true  # rules apply to admins
              restrictions: # restrict who can push to the repo
                users:
                - ouzibot
tide:
  sync_period: 1m
  merge_method:
    ouzi-dev: squash
  pr_status_base_urls:
    '*': https://prow.test-infra.ouzi.io/pr
  blocker_label: tide/merge-blocker
  squash_label: tide/merge-method-squash
  rebase_label: tide/merge-method-rebase
  merge_label: tide/merge-method-merge
  context_options:
    # Use branch protection options to define required and optional contexts
    from-branch-protection: true
    # Treat unknown contexts as required
    skip-unknown-contexts: false
  queries:
  - orgs:
    - ouzi-dev
    labels:
    - lgtm
    - approved
    missingLabels:
    - do-not-merge
    - do-not-merge/hold
    - do-not-merge/work-in-progress
    - needs-rebase
    - do-not-merge/invalid-owners-file

github_reporter:
  job_types_to_report:
  - presubmit
  - postsubmit

slack_reporter_configs:
  '*':
    job_types_to_report:
      - presubmit
      - postsubmit
      - periodic
      - batch
    job_states_to_report:
      - failure
      - error
    channel: cicd-job-status
    # The template shown below is the default
    report_template: 'Job {{.Spec.Job}} of type {{.Spec.Type}} ended with state {{.Status.State}}. <{{.Status.URL}}|View logs>'

presets:
# credential presets
- labels:
    preset-docker: "true"
  env:
    - name: DOCKER_CONFIG
      value: "/kaniko/.docker"
  volumes:
  - name: kaniko-config
    projected:
      sources:
      - secret:
          name: ouzi-bot-pull-push-secret
          items:
          - key: .dockerconfigjson
            path: config.json      
  volumeMounts:
  - name: kaniko-config
    mountPath: /kaniko/.docker
- labels:
    preset-semantic-release: "true"
  env:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: github-token
          key: oauth
- labels:
    preset-aws-ouzi: "true"
  env:
  - name: AWS_ACCESS_KEY_ID
    valueFrom:
      secretKeyRef:
        name: aws-ouzi-creds
        key: access_key_id
  - name: AWS_SECRET_ACCESS_KEY
    valueFrom:
      secretKeyRef:
        name: aws-ouzi-creds
        key: secret_access_key
  - name: AWS_DEFAULT_REGION
    valueFrom:
      secretKeyRef:
        name: aws-ouzi-creds
        key: default_region
- labels:
    preset-aws-dms: "true"
  env:
  - name: AWS_ACCESS_KEY_ID
    valueFrom:
      secretKeyRef:
        name: aws-dms-creds
        key: access_key_id
  - name: AWS_SECRET_ACCESS_KEY
    valueFrom:
      secretKeyRef:
        name: aws-dms-creds
        key: secret_access_key
- labels:
    preset-aws-4leaf: "true"
  env:
  - name: AWS_ACCESS_KEY_ID
    valueFrom:
      secretKeyRef:
        name: aws-4leaf-creds
        key: access_key_id
  - name: AWS_SECRET_ACCESS_KEY
    valueFrom:
      secretKeyRef:
        name: aws-4leaf-creds
        key: secret_access_key
- labels:
    preset-gcloud-testinfra-prow: "true"
  env:
  - name: GOOGLE_APPLICATION_CREDENTIALS
    value: /etc/google-service-account/service-account.json
  volumes:
  - name: google-service-account
    secret:
      secretName: ouzidev-testinfra-prow-gcloud-service-account
  volumeMounts:
  - name: google-service-account
    mountPath: /etc/google-service-account
    readOnly: true
- labels:
    preset-kubeconfig-hoarder-prow: "true"
  env:
  - name: GOOGLE_APPLICATION_CREDENTIALS
    value: /etc/google-service-account/service-account.json
  - name: KUBECONFIG
    value: /etc/kube/kubeconfig
  volumes:
  - name: google-service-account
    secret:
      secretName: ouzidev-hoarder-prow-gcloud-service-account
  - name: kubeconfig
    secret:
      secretName: ouzidev-hoarder-prow-gke-kubeconfig
  volumeMounts:
  - name: google-service-account
    mountPath: /etc/google-service-account
    readOnly: true
  - name: kubeconfig
    mountPath: /etc/kube

in_repo_config:
  enabled:
    # The key can be one of "*" for "globally", "org" or "org/repo".
    # The narrowest match is used.
    ouzi-dev: true

  # Clusters must be allowed before they can be used. Below is the default: Allow the `default` cluster
  # globally.
  # This setting also allows using "*" for "globally", "org" or "org/repo" as key.
  # a given repo. All clusters that are allowed for the specific repo, its org or
  # globally can be used.
  allowed_clusters:
    "*": ["default"]
